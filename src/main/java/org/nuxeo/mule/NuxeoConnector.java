/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.nuxeo.mule;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.mule.api.ConnectionException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.Transformer;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.display.FriendlyName;
import org.mule.api.annotations.display.Password;
import org.mule.api.annotations.display.Placement;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.nuxeo.ecm.automation.client.AutomationClient;
import org.nuxeo.ecm.automation.client.OperationRequest;
import org.nuxeo.ecm.automation.client.Session;
import org.nuxeo.ecm.automation.client.adapters.DocumentService;
import org.nuxeo.ecm.automation.client.jaxrs.impl.HttpAutomationClient;
import org.nuxeo.ecm.automation.client.model.DocRef;
import org.nuxeo.ecm.automation.client.model.Document;
import org.nuxeo.ecm.automation.client.model.Documents;
import org.nuxeo.ecm.automation.client.model.FileBlob;
import org.nuxeo.ecm.automation.client.model.OperationDocumentation;
import org.nuxeo.ecm.automation.client.model.RecordSet;
import org.nuxeo.ecm.automation.client.model.StringBlob;
import org.nuxeo.ecm.automation.client.model.OperationDocumentation.Param;

/**
 * Connector that uses Nuxeo Automation java client to leverage Nuxeo Rest API
 *
 * @author <a href="mailto:tdelprat@nuxeo.com">Tiry</a>
 *
 */
@Connector(name = "nuxeo", schemaVersion = "1.0-SNAPSHOT")
public class NuxeoConnector extends BaseDocumentService {

    /**
     * Nuxeo Server name (IP or DNS name)
     */
    @Configurable
    @Placement(group = "Connection")
    private String serverName = "127.0.0.1";

    /**
     * Port used to connect to Nuxeo Server
     */
    @Configurable
    @Placement(group = "Connection")
    private String port = "8080";

    /**
     * Context Path for Nuxeo instance
     */
    @Configurable
    @Placement(group = "Connection")
    private String contextPath = "nuxeo";

    /**
     * comma separated String listing schemas that must be sent by the server
     * when returning Documents
     */
    @Configurable
    @Optional
    @Placement(group = "Marshaling")
    private String defaultSchemas = "dublincore,common";

    private Session session;

    public NuxeoConnector() {
        serverName = "localhost";
        port = "8080";
        contextPath = "nuxeo";
    }

    /**
     * get the default schemas that should be set by the server when sending
     * Documents
     *
     * @return comma separated String listing schemas
     */
    public String getDefaultSchemas() {
        return defaultSchemas;
    }

    /**
     * set the default schemas that should be set by the server when sending
     * Documents
     *
     * @param defaultSchemas comma separated String listing schemas
     */
    public void setDefaultSchemas(String defaultSchemas) {
        this.defaultSchemas = defaultSchemas;
    }

    /**
     * get Nuxeo Server Name
     *
     * @return Nuxeo Server Name
     */
    public String getServerName() {
        return serverName;
    }

    /**
     * get Nuxeo Server Port
     *
     * @return Nuxeo Server Port
     */
    public String getPort() {
        return port;
    }

    /**
     * get Nuxeo Server Context pat
     *
     * @return Nuxeo Server Context path
     */
    public String getContextPath() {
        return contextPath;
    }

    /**
     * set Nuxeo Server name
     *
     * @param serverName
     */
    public void setServerName(String serverName) {
        this.serverName = serverName;
    }

    /**
     * set port used to connect to Nuxeo Server
     *
     * @param port
     */
    public void setPort(String port) {
        this.port = port;
    }

    /**
     * set Context path of the target Nuxeo Server
     *
     * @param contextPath
     */
    public void setContextPath(String contextPath) {
        this.contextPath = contextPath;
    }

    protected String getServerUrl() {

        if (contextPath == null || contextPath.isEmpty()) {
            return "http://" + serverName + ":" + port + "/" + "automation";
        } else {
            return "http://" + serverName + ":" + port + "/" + contextPath
                    + "/site/automation";
        }
    }

    /**
     * Connect to Nuxeo Server via Automation java client
     *
     * @param username Nuxeo user name
     * @param password Nuxeo password
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey
    String username, @Password
    String password) throws ConnectionException {
        AutomationClient client = new HttpAutomationClient(getServerUrl());
        session = client.getSession(username, password);
        session.setDefaultSchemas(defaultSchemas);
        docService = session.getAdapter(DocumentService.class);
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
        if (session != null) {
            session.close();
        }
    }

    /**
     * Are we connected
     *
     * @return true if an Automation Session is active
     */
    @ValidateConnection
    public boolean isConnected() {
        return (session != null);
    }

    /**
     * Are we connected
     *
     * @return fake ConnectionId based on serverUrl and username
     */
    @ConnectionIdentifier
    public String connectionId() {
        if (session != null) {
            return getServerUrl() + session.getLogin();
        } else {
            return getServerUrl();
        }
    }

    /**
     * Runs a NXQL Query against repository, result is returned as a list of
     * pages of Document
     *
     * {@sample.xml ../../../doc/Nuxeo-connector.xml.sample nuxeo:query}
     *
     * @param query the NXQL Query
     * @param page the page number
     * @param pageSize the page size
     * @param queryParams the query parameters if any
     * @param sortInfo sort columns
     * @return a batched list of Documents
     * @throws Exception if operation can not be executed
     */
    @Processor
    public Documents query(@Placement(group = "operation parameters")
    String query, @Placement(group = "operation parameters")
    @Optional
    @Default("0")
    Integer page, @Placement(group = "operation parameters")
    @Optional
    @Default("20")
    Integer pageSize, @Placement(group = "operation parameters")
    @Optional
    @FriendlyName("Query parameters")
    List<String> queryParams, @Placement(group = "operation parameters")
    @Optional
    @FriendlyName("Sort columns")
    List<String> sortInfo) throws Exception {
        System.out.println("Execute simple query on " + query);
        return (Documents) execPageProvider(null, query, page, pageSize,
                queryParams, sortInfo, false);
    }

    /**
     * Runs a NXQL Query against repository, result is returned as a list of
     * pages of Records
     *
     * {@sample.xml ../../../doc/Nuxeo-connector.xml.sample
     * nuxeo:query-and-fetch}
     *
     * @param query the NXQL Query
     * @param page the page number
     * @param pageSize the page size
     * @param queryParams the query parameters if any
     * @param sortInfo sort columns
     * @return a batched list of Records
     * @throws Exception if operation can not be executed
     */

    @Processor
    public RecordSet queryAndFetch(@Placement(group = "operation parameters")
    String query, @Placement(group = "operation parameters")
    @Optional
    @Default("0")
    Integer page, @Placement(group = "operation parameters")
    @Optional
    @Default("20")
    Integer pageSize, @Placement(group = "operation parameters")
    @Optional
    @FriendlyName("Query parameters")
    List<String> queryParams, @Placement(group = "operation parameters")
    @Optional
    @FriendlyName("Sort columns")
    List<String> sortInfo) throws Exception {
        return (RecordSet) execPageProvider(null, query, page, pageSize,
                queryParams, sortInfo, true);
    }

    /**
     * Runs a Page Provider (named query) against repository, result is returned
     * as a list of pages of Document
     *
     * {@sample.xml ../../../doc/Nuxeo-connector.xml.sample nuxeo:page-provider}
     *
     * @param pageProviderName the name if the PagteProvider to run
     * @param page the page number
     * @param pageSize the page size
     * @param queryParams the query parameters if any
     * @param sortInfo sort columns
     * @return a batched list of Documents
     * @throws Exception if operation can not be executed
     */
    @Processor
    public Documents pageProvider(@Placement(group = "operation parameters")
    String pageProviderName, @Placement(group = "operation parameters")
    @Optional
    @Default("0")
    Integer page, @Placement(group = "operation parameters")
    @Optional
    @Default("20")
    Integer pageSize, @Placement(group = "operation parameters")
    @Optional
    @FriendlyName("Query parameters")
    List<String> queryParams, @Placement(group = "operation parameters")
    @Optional
    @FriendlyName("Sort columns")
    List<String> sortInfo) throws Exception {
        return (Documents) execPageProvider(pageProviderName, null, page,
                pageSize, queryParams, sortInfo, false);
    }

    protected Object execPageProvider(String pageProvider, String query,
            Integer page, Integer pageSize, List<String> queryParams,
            List<String> sortInfo, boolean useRecordSet) throws Exception {

        OperationRequest request;
        if (useRecordSet) {
            request = session.newRequest("Resultset.PageProvider");
        } else {
            request = session.newRequest("Document.PageProvider");
        }

        if (query != null && !query.isEmpty()) {
            request.set("query", query);
        } else {
            request.set("providerName", pageProvider);
        }

        request.set("page", page);
        request.set("pageSize", pageSize);
        if (queryParams != null) {
            request.set("queryParams", queryParams);
        }
        if (sortInfo != null) {
            request.set("sortInfo", sortInfo);
        }

        return request.execute();
    }

    /**
     * Executes an arbitrary operation
     *
     * {@sample.xml ../../../doc/Nuxeo-connector.xml.sample nuxeo:run-operation}
     *
     * @param operationId Name of the Automation Operation
     * @param input Input of the Operation
     * @param params Parameters of the Operation
     * @return Result of the Operation
     * @throws Exception if operation can not be executed
     */
    @Processor
    public Object runOperation(@Placement(group = "operation parameters")
    String operationId, @Placement(group = "operation parameters")
    @Optional
    Object input, @Optional
    @Placement(group = "operation parameters")
    Map<String, String> params) throws Exception {
        OperationRequest request = session.newRequest(operationId);
        OperationDocumentation opDef = request.getOperation();

        // fill operation parameter according to signature
        for (Param param : opDef.getParams()) {
            for (String pname : params.keySet()) {
                if (pname.equals(param.getName())) {
                    request.set(pname, params.get(pname));
                    break;
                }
            }
        }

        if (input != null) {
            String[] sig = opDef.getSignature();
            for (int i = 0; i < sig.length; i = i + 2) {
                String inputType = sig[i];
                if (inputType.equals("Document")) {
                    request.setInput(new DocRef(input.toString()));
                } else if (inputType.equals("Blob")) {
                    if (input instanceof File) {
                        request.setInput(new FileBlob((File) input));
                    }
                }
            }
        }
        return request.execute();
    }

    /****************************** Transformers **************/

    /**
     * @Mime(MimeTypes.JSON)
     * @Transformer(sourceTypes = { Document.class }) public static String
     *                          documentToJSON(Document doc) {
     *
     *                          return null; }
     **/

    /**
     * Creates a Blob from a File
     *
     * {@sample.xml ../../../doc/Nuxeo-connector.xml.sample nuxeo:file-to-blob}
     *
     * @param file the input File
     * @return the Blob wrapping the File
     */
    @Transformer(sourceTypes = { File.class })
    public static FileBlob fileToBlob(File file) {
        return new FileBlob(file);
    }

    /**
     * Creates a Blob from a String
     *
     * {@sample.xml ../../../doc/Nuxeo-connector.xml.sample
     * nuxeo:string-to-blob}
     *
     * @param input the input String
     * @return the Blob wrapping the String
     */
    @Transformer(sourceTypes = { String.class })
    public static StringBlob stringToBlob(String input) {
        return new StringBlob(input);
    }

    /**
     * Convert a Document to a Simple Map
     *
     * {@sample.xml ../../../doc/Nuxeo-connector.xml.sample
     * nuxeo:document-to-map}
     *
     * @param doc the Document to convert
     * @return the resulting Map<String, Object>
     */
    @Transformer(sourceTypes = { Document.class })
    public static Map<String, Object> documentToMap(Document doc) {
        Map<String, Object> map = new HashMap<String, Object>(doc.getProperties().map());
        map.put("type", doc.getType());
        map.put("facets", doc.getFacets().list());
        map.put("id", doc.getId());
        map.put("lock", doc.getLock());
        map.put("lockCreated", doc.getLockCreated());
        map.put("lockOwner", doc.getLockOwner());
        map.put("path", doc.getPath());
        map.put("repository", doc.getRepository());
        map.put("state", doc.getState());
        return map;
    }

    /**
     * Converts a list of Documents into a simple list of Map
     *
     * {@sample.xml ../../../doc/Nuxeo-connector.xml.sample
     * nuxeo:documents-to-list-of-map}
     *
     * @param docs the Documents list to convert
     * @return the resulting List of Map
     */
    @Transformer(sourceTypes = { Documents.class })
    public static List<Map<String, Object>> documentsToListOfMap(Documents docs) {
        List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
        for (Document doc : docs) {
            result.add(documentToMap(doc));
        }
        return result;
    }
}
